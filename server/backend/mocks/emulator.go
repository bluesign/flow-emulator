// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/onflow/flow-emulator/server/backend (interfaces: Emulator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interpreter "github.com/onflow/cadence/runtime/interpreter"
	emulator "github.com/onflow/flow-emulator/emulator"
	types "github.com/onflow/flow-emulator/types"
	flow "github.com/onflow/flow-go-sdk"
	flow0 "github.com/onflow/flow-go/model/flow"
)

// MockEmulator is a mock of Emulator interface.
type MockEmulator struct {
	ctrl     *gomock.Controller
	recorder *MockEmulatorMockRecorder
}

// MockEmulatorMockRecorder is the mock recorder for MockEmulator.
type MockEmulatorMockRecorder struct {
	mock *MockEmulator
}

// NewMockEmulator creates a new mock instance.
func NewMockEmulator(ctrl *gomock.Controller) *MockEmulator {
	mock := &MockEmulator{ctrl: ctrl}
	mock.recorder = &MockEmulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmulator) EXPECT() *MockEmulatorMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockEmulator) AddTransaction(arg0 flow.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockEmulatorMockRecorder) AddTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockEmulator)(nil).AddTransaction), arg0)
}

// CommitBlock mocks base method.
func (m *MockEmulator) CommitBlock() (*flow0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBlock")
	ret0, _ := ret[0].(*flow0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitBlock indicates an expected call of CommitBlock.
func (mr *MockEmulatorMockRecorder) CommitBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBlock", reflect.TypeOf((*MockEmulator)(nil).CommitBlock))
}

// CreateSnapshot mocks base method.
func (m *MockEmulator) CreateSnapshot(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockEmulatorMockRecorder) CreateSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockEmulator)(nil).CreateSnapshot), arg0)
}

// EndDebugging mocks base method.
func (m *MockEmulator) EndDebugging() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndDebugging")
}

// EndDebugging indicates an expected call of EndDebugging.
func (mr *MockEmulatorMockRecorder) EndDebugging() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndDebugging", reflect.TypeOf((*MockEmulator)(nil).EndDebugging))
}

// ExecuteAndCommitBlock mocks base method.
func (m *MockEmulator) ExecuteAndCommitBlock() (*flow0.Block, []*types.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAndCommitBlock")
	ret0, _ := ret[0].(*flow0.Block)
	ret1, _ := ret[1].([]*types.TransactionResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteAndCommitBlock indicates an expected call of ExecuteAndCommitBlock.
func (mr *MockEmulatorMockRecorder) ExecuteAndCommitBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAndCommitBlock", reflect.TypeOf((*MockEmulator)(nil).ExecuteAndCommitBlock))
}

// ExecuteBlock mocks base method.
func (m *MockEmulator) ExecuteBlock() ([]*types.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBlock")
	ret0, _ := ret[0].([]*types.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteBlock indicates an expected call of ExecuteBlock.
func (mr *MockEmulatorMockRecorder) ExecuteBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBlock", reflect.TypeOf((*MockEmulator)(nil).ExecuteBlock))
}

// ExecuteNextTransaction mocks base method.
func (m *MockEmulator) ExecuteNextTransaction() (*types.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteNextTransaction")
	ret0, _ := ret[0].(*types.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteNextTransaction indicates an expected call of ExecuteNextTransaction.
func (mr *MockEmulatorMockRecorder) ExecuteNextTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteNextTransaction", reflect.TypeOf((*MockEmulator)(nil).ExecuteNextTransaction))
}

// ExecuteScript mocks base method.
func (m *MockEmulator) ExecuteScript(arg0 []byte, arg1 [][]byte) (*types.ScriptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", arg0, arg1)
	ret0, _ := ret[0].(*types.ScriptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript.
func (mr *MockEmulatorMockRecorder) ExecuteScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockEmulator)(nil).ExecuteScript), arg0, arg1)
}

// ExecuteScriptAtBlock mocks base method.
func (m *MockEmulator) ExecuteScriptAtBlock(arg0 []byte, arg1 [][]byte, arg2 uint64) (*types.ScriptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScriptAtBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.ScriptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScriptAtBlock indicates an expected call of ExecuteScriptAtBlock.
func (mr *MockEmulatorMockRecorder) ExecuteScriptAtBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScriptAtBlock", reflect.TypeOf((*MockEmulator)(nil).ExecuteScriptAtBlock), arg0, arg1, arg2)
}

// GetAccount mocks base method.
func (m *MockEmulator) GetAccount(arg0 flow.Address) (*flow.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*flow.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockEmulatorMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockEmulator)(nil).GetAccount), arg0)
}

// GetAccountAtBlock mocks base method.
func (m *MockEmulator) GetAccountAtBlock(arg0 flow.Address, arg1 uint64) (*flow.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAtBlock", arg0, arg1)
	ret0, _ := ret[0].(*flow.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAtBlock indicates an expected call of GetAccountAtBlock.
func (mr *MockEmulatorMockRecorder) GetAccountAtBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAtBlock", reflect.TypeOf((*MockEmulator)(nil).GetAccountAtBlock), arg0, arg1)
}

// GetAccountByIndex mocks base method.
func (m *MockEmulator) GetAccountByIndex(arg0 uint) (*flow.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByIndex", arg0)
	ret0, _ := ret[0].(*flow.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIndex indicates an expected call of GetAccountByIndex.
func (mr *MockEmulatorMockRecorder) GetAccountByIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIndex", reflect.TypeOf((*MockEmulator)(nil).GetAccountByIndex), arg0)
}

// GetAccountStorage mocks base method.
func (m *MockEmulator) GetAccountStorage(arg0 flow.Address) (*emulator.AccountStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStorage", arg0)
	ret0, _ := ret[0].(*emulator.AccountStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStorage indicates an expected call of GetAccountStorage.
func (mr *MockEmulatorMockRecorder) GetAccountStorage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStorage", reflect.TypeOf((*MockEmulator)(nil).GetAccountStorage), arg0)
}

// GetAccountUnsafe mocks base method.
func (m *MockEmulator) GetAccountUnsafe(arg0 flow.Address) (*flow.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountUnsafe", arg0)
	ret0, _ := ret[0].(*flow.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountUnsafe indicates an expected call of GetAccountUnsafe.
func (mr *MockEmulatorMockRecorder) GetAccountUnsafe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountUnsafe", reflect.TypeOf((*MockEmulator)(nil).GetAccountUnsafe), arg0)
}

// GetBlockByHeight mocks base method.
func (m *MockEmulator) GetBlockByHeight(arg0 uint64) (*flow0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", arg0)
	ret0, _ := ret[0].(*flow0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockEmulatorMockRecorder) GetBlockByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockEmulator)(nil).GetBlockByHeight), arg0)
}

// GetBlockByID mocks base method.
func (m *MockEmulator) GetBlockByID(arg0 flow.Identifier) (*flow0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByID", arg0)
	ret0, _ := ret[0].(*flow0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByID indicates an expected call of GetBlockByID.
func (mr *MockEmulatorMockRecorder) GetBlockByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByID", reflect.TypeOf((*MockEmulator)(nil).GetBlockByID), arg0)
}

// GetCollection mocks base method.
func (m *MockEmulator) GetCollection(arg0 flow.Identifier) (*flow.Collection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", arg0)
	ret0, _ := ret[0].(*flow.Collection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockEmulatorMockRecorder) GetCollection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockEmulator)(nil).GetCollection), arg0)
}

// GetEventsByHeight mocks base method.
func (m *MockEmulator) GetEventsByHeight(arg0 uint64, arg1 string) ([]flow.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByHeight", arg0, arg1)
	ret0, _ := ret[0].([]flow.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByHeight indicates an expected call of GetEventsByHeight.
func (mr *MockEmulatorMockRecorder) GetEventsByHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByHeight", reflect.TypeOf((*MockEmulator)(nil).GetEventsByHeight), arg0, arg1)
}

// GetLatestBlock mocks base method.
func (m *MockEmulator) GetLatestBlock() (*flow0.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*flow0.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockEmulatorMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockEmulator)(nil).GetLatestBlock))
}

// GetTransaction mocks base method.
func (m *MockEmulator) GetTransaction(arg0 flow.Identifier) (*flow.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0)
	ret0, _ := ret[0].(*flow.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockEmulatorMockRecorder) GetTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockEmulator)(nil).GetTransaction), arg0)
}

// GetTransactionResult mocks base method.
func (m *MockEmulator) GetTransactionResult(arg0 flow.Identifier) (*flow.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionResult", arg0)
	ret0, _ := ret[0].(*flow.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionResult indicates an expected call of GetTransactionResult.
func (mr *MockEmulatorMockRecorder) GetTransactionResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionResult", reflect.TypeOf((*MockEmulator)(nil).GetTransactionResult), arg0)
}

// LoadSnapshot mocks base method.
func (m *MockEmulator) LoadSnapshot(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSnapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadSnapshot indicates an expected call of LoadSnapshot.
func (mr *MockEmulatorMockRecorder) LoadSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSnapshot", reflect.TypeOf((*MockEmulator)(nil).LoadSnapshot), arg0)
}

// RollbackToBlockHeight mocks base method.
func (m *MockEmulator) RollbackToBlockHeight(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToBlockHeight", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToBlockHeight indicates an expected call of RollbackToBlockHeight.
func (mr *MockEmulatorMockRecorder) RollbackToBlockHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToBlockHeight", reflect.TypeOf((*MockEmulator)(nil).RollbackToBlockHeight), arg0)
}

// SetDebugger mocks base method.
func (m *MockEmulator) SetDebugger(arg0 *interpreter.Debugger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDebugger", arg0)
}

// SetDebugger indicates an expected call of SetDebugger.
func (mr *MockEmulatorMockRecorder) SetDebugger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDebugger", reflect.TypeOf((*MockEmulator)(nil).SetDebugger), arg0)
}

// Snapshots mocks base method.
func (m *MockEmulator) Snapshots() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockEmulatorMockRecorder) Snapshots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockEmulator)(nil).Snapshots))
}
